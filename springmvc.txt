1 .必须要要用的7个jar

2. 一般程序流程jsp - servlet（springMVC）-jsp 

3. springmvc配置文件spring mvc 
   springMVC常用的命名空间：beans aop context mvc
   
4. 普通的servlet 流程
请求 -url-patten-交给对应的servlet去处理
如果先在享用springmvc,而不是普通的servlet，如何告知程序？-让springMVC介入程序
需要配置一个springMVC自带的servlet 名字叫org.springframework.web.servlet.DispatcherServlet("请求")

通过以下方式，把请求交给springMVC去处理：去找注解@RuestMapping映射请求的URL进行处理
之后配置srpingMVC
配置方式:
 <servlet>
  	<servlet-name>springDispatcherServlet</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	
  	<!-- 指定spring mvc配置文件位置 不指定使用默认情况 -->
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
        <param-value>classpath:springmvc.xml</param-value>
    </init-param>  
   
    <!-- 设置启动顺序 -->  
    <!-- 启动时以第一个身份启动 -->
    <load-on-startup>1</load-on-startup>  
  </servlet>
  
  <!-- 匹配映射拦截 -->
  <servlet-mapping>
    <servlet-name>springDispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  
  其中<url-pattern>/</url-pattern>
  的"/"代表一切请求，不是"/*"
  "/user":之拦截/user开头的请求
  "user/abc.do":只拦截该请求
  ".action":只拦截.action结尾的请求
  
  <!--  --------------------------------------------- -->
  
  映射是通过去匹配@RequestMapping("")注解，@RequestMapping("")默认属性是value，可以和方法名类名不一致
  (1)method：@RequestMapping("")注解中通过method属性去指定请求的方式,常用的有(get ,post ,delete ,put)
		如：@RequestMapping(value="welcome",method=RequestMethod.POST)//映射
  (2)params：@RequestMapping("")注解中通过params,约束请求当中的值里面的参数
		如：@RequestMapping(parmas={"name=zs,age!=3"}),指请求里面里面必有须有name属性并且必须等于zs,并且如果age属性，必须不等于3，也就是说属性是不等于，没有此属性也可以，如果是!age参数，那就不能有此参数，否则报错.
  (3)headers：@RequestMapping("")注解中通过headers,约束请求头
  
  @RequestMapping("")中的几个属性他们是与的关系
  params和headers只需要了解就可以，使用params和headers来更加精确的映射请求，params和headers支持简单的表达式
  <!-- 
		params个headers支持的简单表达式：
			- parma1:表示请求必须包含为param1的请求参数
			- !parma1:表示请求不能包含为param1的请求参数
			- {"prama1!=value1"}:表示请求包含名为param1的请求参数，但是其值不能是walue1
			- {"param1=value1","param2"}:请求必须包含名为param1和param2的两个请求参数，且param1参数的值必须为value1
			
  -->
  
  springmvc.xml的配置 :
  
  <!-- 配置自定义的扫描器 -->
	<context:component-scan base-package="org.com.hanler"></context:component-scan>
	
	<!-- 配置视图解析器：把handler方法的返回值解析为实际物理视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/vive/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	通过(prefix)前缀+returnValue(返回值)+suffix()这样的方式进行解析获得实际的视图URl，然后进行转发.
	
5. 把一个普通的类变成一个有特定功能的类
	方法有：实现接口 ，继承父类 ，注解 ，配置文件
	spring 把有注解的类放在扫描器当中，在配置文件当中配置方式如下：
	<context:component-scan base-package="类的全类名"></context:component-scan>
	之后在配置一个视图解析器（InternalResourceViewResolver）
	
6. 报错NoClassDefFoundError：说明缺少jar包

7. ant风格的请求路径
	？  代表的是任意单字符
	*   代表是的任意个字符
	**  代表任意目录
	
	- /user/*/createUser:匹配/user/aaa/createUser
	  /user/bbb/createUser等URL
	- /user/**/createUser:匹配/user/createUser、
	  /user/aaa/bbb/createUser等URL
	- /user/createUser??:匹配/user/createUser、
	  user/createUserbb等URL
	如： @RequestMapping(value="welcome/**/test")
		请求示例：a href="welcome/sss/bbb/sss/test"
		
		
8 .通过@PathVariable注解获取动态请求参数，基于ant
	控制器处理方法的入参中：URL中的{XXX}占位符可以通过@PathVariable("XXX")绑定到操作方法中的入参中
	如：
	@RequestMapping("/delete/{id}")
	public String delete(@PathVariable("id") Integer id){
		
		userDao.delete(id);
		return "succes";
	}
	
9 .Rest风格的URL.
	以 CRUD 为例：
	新增：/order POST(表单发送请求)			
	修改：/order/1 PUT(表单发送请求)			旧的样例：update?id=1
	获取：/order/1 GET							旧的样例：get?id=1
	删除：/order/ DELETE(表单发送请求)			旧的样例：delete?id=1
	
	如个发送PUT 和 DELETE形式的请求呢？
	(1).需要在web.xml中配置一个org.springframework.web.filter.HiddenHttpMethodFilter
		配置方式如下：
		  <filter>
			<filter-name>HiddenHttpMethodFilter</filter-name>
			<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
		  </filter>
		
		<filter-mapping>
			<filter-name>HiddenHttpMethodFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
	(2).需要在表单中发送一个 POST 请求
	(3).发送 POST 请求时需要携带一个 name="_method" 的隐藏域名, value值为 DELTE 或 PUT
		如下：
		<form action="springmvc/testRest/1" method="post">
			<input type="hidden" name="_method" value="PUT"/>
			<input type=submit" value="走你"/>
		</form>
		
		隐藏域为当中的：<input type="hidden" name="_method" value="PUT"/>
		
		
		
	怎么在springmvc中的目标方法中如何得到ID呢？
	答：使用@PathVariable 注解
	
	------------------------------------------------
	
10.	@RequestParam 注解来映射请求参数,
	其中value值即为请求参数的参数名,
	required 只该参数是否必须，默认为true
	defaudefaultValue为参数默认值
	示例代码如下：
	后台示例代码
	public String testRequestParam(@RequestParam(value="username",required=false)String username,@RequestParam(value="age",required=false,defaultValue="0") int age){
		
		System.out.println("username:"+username);
		System.out.println("age:"+age);
		return SUCCES;
	}
	前台示例代码：
	<a href="springmvc/testRequestParam?username=张三&age=22">testRequestParam</a>
	
11.	@RequestHeader 注解映射请求头信息，使用较少了解就成
	用法与@RequestParam注解相同
	
12. @CookieValue 注解映射一个Cookie值，用法与@RequestParam注解相同

13. SpringMVC 会按请求参数名和POJO属性名进行自动匹配，自动为该对象填充属性值。支持级联属性。  
	如：dept.deptId、dept.address.tel 等
	示例代码如下：
	后台示例代码：(会自定注入javaBean  User当中)
	@RequestMapping("testPOJO")
	public String testPOJO(user user){
		System.out.println("user"+user);
		return SUCCES;
	}
	前台示例代码：
	<form action="springmvc/testPOJO" method="post">
		用户名:
		<input type="text" name="username"><br>
		password:
		<input type="password" name="password"><br>
		email
		<input type="text" name="email"><br>
		age:
		<input type="text" name="age"><br>
		province:
		<input type="text" name="addres.province"><br>
		<input type="submit" value="走你POJO"/>
	</form>